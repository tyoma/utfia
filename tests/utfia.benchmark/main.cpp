#include <utfia/iterator.h>

#include <iostream>
#include <string>
#include <time.h>

using namespace std;

namespace
{
	const unsigned c_n_iterations = 300000;
	string c_roll_the_dice = "your life is your life\ndon’t let it be clubbed into dank submission.\nbe on the watch.\nthere are ways out.\nthere is a light somewhere.\nit may not be much light but\nit beats the darkness.\nbe on the watch.\nthe gods will offer you chances.\nknow them.\ntake them.\nyou can’t beat death but\nyou can beat death in life, sometimes.\nand the more often you learn to do it,\nthe more light there will be.\nyour life is your life.\nknow it while you have it.\nyou are marvelous\nthe gods wait to delight\nin you.";
	string c_choven = "\xd0\xa5\xd0\xb2\xd0\xb8\xd0\xbb\xd1\x8f\x20\xd1\x80\xd0\xb0\xd0\xb4\xd1\x96\xd1\x81\xd0\xbd\xd0\xbe\x20\xd0\xbf\xd0\xbb\xd1\x8e\xd1\x81\xd0\xba\xd0\xbe\xd1\x87\xd0\xb5\x20\xd1\x82\xd0\xb0\x20\xd0\xbb\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\xd1\x81\xd1\x8f\x20\xd0\xb4\xd0\xbe\x20\xd1\x87\xd0\xbe\xd0\xb2\xd0\xbd\xd0\xb0\x2c\x0d\x0a\xd0\x9c\xd0\xbe\xd0\xb2\x20\xd0\xb4\xd0\xb8\xd1\x82\xd1\x8f\x2c\x20\xd1\x86\xd1\x96\xd0\xba\xd0\xb0\xd0\xb2\xd0\xb0\x2c\x20\xd1\x88\xd0\xb5\xd0\xbf\xd1\x87\xd0\xb5\x20\xd1\x96\x20\xd1\x80\xd0\xbe\xd0\xb7\xd0\xbf\xd0\xb8\xd1\x82\xd1\x83\xd1\x94\x20\xd0\xb2\xd0\xbe\xd0\xbd\xd0\xb0\x3a\x0d\x0a\xc2\xab\xd0\xa5\xd1\x82\xd0\xbe\x20\xd1\x82\xd0\xb8\x2c\x20\xd1\x87\xd0\xbe\xd0\xb2\xd0\xbd\xd0\xb5\x3f\x20\xd0\xa9\xd0\xbe\x20\xd1\x82\xd0\xb8\x2c\x20\xd1\x87\xd0\xbe\xd0\xb2\xd0\xbd\xd0\xb5\x3f\x20\xd0\x92\xd1\x96\xd0\xb4\xd0\xba\xd0\xb8\x20\xd1\x96\x20\xd0\xba\xd1\x83\xd0\xb4\xd0\xb8\x20\xd0\xbf\xd0\xbb\xd0\xb8\xd0\xb2\xd0\xb5\xd1\x88\x3f\x0d\x0a\xd0\x86\x20\xd0\xb7\xd0\xb0\x20\xd1\x87\xd0\xb8\xd0\xbc\x20\xd1\x82\xd1\x83\xd0\xb4\xd0\xb8\x20\xd1\x88\xd1\x83\xd0\xba\xd0\xb0\xd1\x94\xd1\x88\x3f\x20\xd0\xa9\xd0\xbe\x20\xd0\xbf\xd1\x80\xd0\xbe\xd0\xb1\xd1\x83\xd0\xb2\x3f\x20\xd0\xa7\xd0\xbe\xd0\xb3\xd0\xbe\x20\xd1\x89\xd0\xb5\x20\xd0\xb6\xd0\xb4\xd0\xb5\xd1\x88\x3f\xc2\xbb\x0d\x0a\xd0\x86\x20\xd0\xbf\xd0\xbe\xd0\xb2\xd0\xb7\xd0\xb5\x20\xd0\xbb\xd1\x96\xd0\xbd\xd0\xb8\xd0\xb2\xd0\xbe\x20\xd1\x87\xd0\xbe\xd0\xb2\xd0\xb5\xd0\xbd\x2c\x20\xd1\x96\x20\xd0\xb2\xd0\xbe\xd1\x80\xd0\xba\xd0\xbe\xd1\x87\xd0\xb5\x2c\x20\xd1\x96\x20\xd0\xb1\xd1\x83\xd1\x80\xd1\x87\xd0\xb8\xd1\x82\xd1\x8c\x3a\x0d\x0a\xc2\xab\xd0\x92\xd1\x96\xd0\xb4\xd0\xba\xd0\xb8\x20\xd0\xb2\xd0\xb7\xd1\x8f\xd0\xb2\xd1\x81\xd1\x8f\x20\xd1\x8f\x20\xe2\x80\x93\x20\xd0\xbd\xd0\xb5\x20\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x8e\x3b\x20\xd1\x87\xd0\xb8\xd0\xbc\x20\xd0\xbf\xd1\x80\xd0\xb8\xd0\xb9\xd0\xb4\xd0\xb5\xd1\x82\xd1\x8c\xd1\x81\xd1\x8f\x20\xd0\xb7\xd0\xb0\xd0\xba\xd1\x96\xd0\xbd\xd1\x87\xd0\xb8\xd1\x82\xd1\x8c\x0d\x0a\xd0\x91\xd1\x96\xd0\xb3\x20\xd0\xbc\xd1\x96\xd0\xb9\x20\xd0\xb2\xd1\x96\xd1\x87\xd0\xbd\xd0\xb8\xd0\xb9\x20\xe2\x80\x93\x20\xd1\x82\xd0\xbe\xd0\xb6\x20\xd0\xbd\xd0\xb5\x20\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x8e\x2e\x20\xd0\xa5\xd0\xb2\xd0\xb8\xd0\xbb\xd1\x8f\x20\xd0\xbd\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82\xd1\x8c\x2c\x20\xd0\xb1\xd1\x83\xd1\x80\xd1\x8f\x20\xd1\x80\xd0\xb2\xd0\xb5\x2c\x0d\x0a\xd0\xa1\xd0\xba\xd0\xb0\xd0\xbb\xd0\xb8\x20\xd0\xb3\xd1\x80\xd0\xbe\xd0\xb7\xd1\x8f\xd1\x82\xd1\x8c\x2c\x20\xd0\xbd\xd0\xb0\xd0\xb4\xd1\x8f\xd1\x82\xd1\x8c\x2d\xd0\xbf\xd1\x80\xd0\xbe\xd1\x81\xd1\x8f\xd1\x82\xd1\x8c\x20\xd0\xba\x20\xd1\x81\xd0\xbe\xd0\xb1\xd1\x96\x20\xd0\xb1\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb3\xd0\xb8\x20\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xb5\x2e\x0d\x0a";
	string c_chinese = "\xe4\xba\xba\xe7\x94\x9f\xe5\xa4\xa9\xe5\x9c\xb0\xe9\x97\xb4\xef\xbc\x8c\xe5\xbf\xbd\xe5\xa6\x82\xe8\xbf\x9c\xe8\xa1\x8c\xe5\xae\xa2\xe3\x80\x82\xe7\x94\x9f\xe5\xb9\xb4\xe4\xb8\x8d\xe6\xbb\xa1\xe7\x99\xbe\xef\xbc\x8c\xe5\xb8\xb8\xe6\x80\x80\xe5\x8d\x83\xe5\xb2\x81\xe5\xbf\xa7\xe3\x80\x82\xe5\x8f\xaa\xe7\xbc\x98\xe6\x84\x9f\xe5\x90\x9b\xe4\xb8\x80\xe5\x9b\x9e\xe9\xa1\xbe\xef\xbc\x8c\xe4\xbb\x8e\xe6\xad\xa4\xe6\x80\x9d\xe5\x90\x9b\xe6\x9c\x9d\xe4\xb8\x8e\xe6\x9a\xae\xe3\x80\x82\xe6\x80\x9d\xe5\x90\x9b\xe4\xbb\xa4\xe4\xba\xba\xe8\x80\x81\xef\xbc\x8c\xe5\xb2\x81\xe6\x9c\x88\xe5\xbf\xbd\xe5\xb7\xb2\xe6\x99\x9a\xe3\x80\x82\xe6\x84\xbf\xe5\xbe\x97\xe4\xb8\x80\xe5\xbf\x83\xe4\xba\xba\xef\xbc\x8c\xe7\x99\xbd\xe9\xa6\x96\xe4\xb8\x8d\xe7\x9b\xb8\xe7\xa6\xbb\xe3\x80\x82";

	unsigned utf8_length(const string &utf8_string)
	{
		unsigned l = 0;
		const char *pbegin = utf8_string.c_str();
		const char *pend = utf8_string.c_str() + utf8_string.length();

		for (const char *j = pbegin; j != pend; utfia::utf8::next(j, pend))
			l++;
		return l;
	}

	unsigned sum(const string &utf8_string)
	{
		unsigned sum = 0;
		const char *pbegin = utf8_string.c_str();
		const char *pend = utf8_string.c_str() + utf8_string.length();

		for (const char *j = pbegin; j != pend; )
			sum += utfia::utf8::next(j, pend);
		return sum;
	}
}

int main()
{
	utfia::utf8::codepoint sum_ = 0;
	clock_t start_time = clock();
	string text = c_roll_the_dice + c_choven + c_chinese + c_chinese + c_chinese;
//	string text = c_roll_the_dice;
//	string text = c_choven;
//	string text = c_chinese;
	unsigned length = utf8_length(text);

	start_time = clock();
	for (unsigned i = c_n_iterations; i; --i)
		sum_ += utf8_length(text);
	double taken = 1.0 * (clock() - start_time) / CLOCKS_PER_SEC / length / c_n_iterations;
	cout << "Single iteration time: " << 10e9 * taken << "ns" << endl;
	cout << sum_ << endl << endl;

	start_time = clock();
	for (unsigned i = c_n_iterations; i; --i)
		sum_ += sum(text);
	taken = 1.0 * (clock() - start_time) / CLOCKS_PER_SEC / length / c_n_iterations;
	cout << "Single iteration + read time: " << 10e9 * taken << "ns" << endl;
	cout << sum_ << endl << endl;
}
